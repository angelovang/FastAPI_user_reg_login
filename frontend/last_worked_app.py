from nicegui import ui
import requests

API_URL = "http://127.0.0.1:8000"
token = None


# -------------------- Navbar --------------------
def add_header():
    with ui.element("div").classes(
        "fixed top-0 left-0 w-full h-16 bg-amber-100 shadow-md flex items-center justify-center z-50"
    ):
        ui.icon("museum").classes("text-stone-700 text-3xl")  # –∏–∫–æ–Ω–∫–∞ (–º–æ–∂–µ—à –¥–∞ —Å–º–µ–Ω–∏—à —Å –¥—Ä—É–≥–∞)
        ui.label("___Archaeological data entry system___").classes(
            "text-2xl font-serif italic text-stone-800"
        )
        ui.icon("history_edu").classes("text-stone-700 text-3xl")
    # –æ—Å—Ç–∞–≤—è–º–µ –ø—Ä–∞–∑–Ω–æ –º—è—Å—Ç–æ –ø–æ–¥ navbar, –∑–∞ –¥–∞ –Ω–µ —Å–µ –∑–∞—Å—Ç—ä–ø–≤–∞ —Å—ä—Å —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ
    ui.space().classes("h-20")


# -------------------- API —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def register(username, email, password):
    try:
        response = requests.post(f"{API_URL}/users/", json={
            "username": username,
            "email": email,
            "password": password
        })
        if response.status_code == 200:
            ui.notify("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        else:
            ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞: {response.json().get('detail', 'Unknown error')}")
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞ —Å –±–µ–∫–µ–Ω–¥–∞: {e}")


def get_users():
    try:
        response = requests.get(f"{API_URL}/users/")
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ: {e}")
    return []


def update_user(user_id, username, email):
    try:
        response = requests.put(f"{API_URL}/users/{user_id}", json={
            "username": username,
            "email": email
        })
        return response.status_code == 200
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ: {e}")
        return False


def delete_user(user_id):
    try:
        response = requests.delete(f"{API_URL}/users/{user_id}")
        return response.status_code == 200
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ: {e}")
        return False


# -------------------- UI —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def show_register():
    with ui.card().classes("p-8 flex flex-col items-center gap-4 shadow-xl"):
        ui.label("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è").classes("text-xl font-bold")
        username = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ")
        email = ui.input("–ò–º–µ–π–ª")
        password = ui.input("–ü–∞—Ä–æ–ª–∞", password=True)
        ui.button("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–π", on_click=lambda: register(username.value, email.value, password.value))
        ui.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=lambda: ui.navigate.to('/'))


def show_login():
    with ui.card().classes("p-8 flex flex-col items-center gap-4 shadow-xl"):
        ui.label("–í—Ö–æ–¥").classes("text-xl font-bold")
        username = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ")
        password = ui.input("–ü–∞—Ä–æ–ª–∞", password=True)

        def login_action():
            global token
            token = "fake_token"
            ui.notify("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–ª—è–∑–æ—Ö—Ç–µ!")
            ui.navigate.to('/dashboard')

        ui.button("–í–ª–µ–∑", on_click=login_action)
        ui.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=lambda: ui.navigate.to('/'))


def show_dashboard():
    """Dashboard —Å –æ—Ç–¥–µ–ª–Ω–∏ —Ä–µ–¥–æ–≤–µ –∏ –±—É—Ç–æ–Ω–∏ –∑–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥"""
    with ui.card().classes("p-8 flex flex-col gap-4 shadow-xl w-full max-w-4xl"):
        ui.label("üìã –¢–∞–±–ª–æ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏").classes("text-xl font-bold")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞ —Ä–µ–¥–æ–≤–µ—Ç–µ
        rows_container = ui.column().classes("gap-2")

        # --- –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–¥–æ–≤–µ—Ç–µ ---
        def refresh_rows():
            rows_container.clear()
            users = get_users()  # –≤–∑–∏–º–∞–º–µ –∞–∫—Ç—É–∞–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
            for user in users:
                with rows_container:
                    with ui.row().classes("items-center gap-4 border-b py-2"):
                        ui.label(str(user['id'])).classes("w-8")
                        ui.label(user['username']).classes("w-48")
                        ui.label(user['email']).classes("w-64")
                        with ui.row().classes("gap-2"):
                            ui.button("‚úèÔ∏è",on_click=lambda u=user: edit_user_dialog(u)).props(
                                'flat dense round')
                            ui.button("üóëÔ∏è",on_click=lambda u=user: delete_user_action(u)).props(
                                'flat dense round color=red')

        # --- –î–∏–∞–ª–æ–≥ –∑–∞ —Ä–µ–¥–∞–∫—Ü–∏—è ---
        def edit_user_dialog(user):
            with ui.dialog() as dialog, ui.card():
                ui.label(f"–†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ {user['username']}").classes("text-xl")
                username = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ", value=user['username'])
                email = ui.input("–ò–º–µ–π–ª", value=user['email'])

                def save():
                    if update_user(user['id'], username.value, email.value):
                        ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –æ–±–Ω–æ–≤–µ–Ω!")
                        refresh_rows()
                    else:
                        ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ!")
                    dialog.close()

                def confirm_delete():
                    with ui.dialog() as confirm, ui.card().classes("p-4"):
                        ui.label(f"‚ùó –°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ '{user['username']}'?").classes(
                            "text-lg text-red-600"
                        )

                        def really_delete():
                            if delete_user(user['id']):
                                ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                                refresh_rows()
                            else:
                                ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")
                            confirm.close()
                            dialog.close()

                        with ui.row().classes("gap-4 justify-end"):
                            ui.button("–î–∞, –∏–∑—Ç—Ä–∏–π", on_click=really_delete).classes(
                                "bg-red-500 text-white px-4 py-1 rounded"
                            )
                            ui.button("–û—Ç–∫–∞–∂–∏", on_click=confirm.close).classes(
                                "bg-gray-300 px-4 py-1 rounded"
                            )

                    confirm.open()

                with ui.row().classes("gap-4 justify-between"):
                    ui.button("–ó–∞–ø–∞–∑–∏", on_click=save).classes("bg-green-500 text-white px-4 py-1 rounded")
                    ui.button("–ò–∑—Ç—Ä–∏–π", on_click=confirm_delete).classes("bg-red-500 text-white px-4 py-1 rounded")
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=dialog.close).classes("bg-gray-300 px-4 py-1 rounded")

            dialog.open()  # <-- –≤–∞–∂–Ω–æ: –æ—Ç–≤–∞—Ä—è –¥–∏–∞–ª–æ–≥–∞

        # --- –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ —Å –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ ---
        def delete_user_action(user):
            with ui.dialog() as dialog, ui.card().classes("p-4"):
                ui.label(f"‚ùó –°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ '{user['username']}'?").classes(
                    "text-lg text-red-600"
                )

                def confirm_delete():
                    if delete_user(user['id']):
                        ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                        refresh_rows()
                    else:
                        ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")
                    dialog.close()

                with ui.row().classes("gap-4 justify-end"):
                    ui.button("–î–∞, –∏–∑—Ç—Ä–∏–π", on_click=confirm_delete).classes("bg-red-500 text-white px-4 py-1 rounded")
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=dialog.close).classes("bg-gray-300 px-4 py-1 rounded")

            dialog.open()

        # --- –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ ---
        refresh_rows()


# -------------------- –°—Ç—Ä–∞–Ω–∏—Ü–∏ --------------------
@ui.page('/')
def main_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        with ui.card().classes("p-8 flex flex-col items-center gap-4 shadow-xl"):
            ui.label("–î–æ–±—Ä–µ –¥–æ—à–ª–∏!").classes("text-3xl font-bold mb-4")
            ui.button("üîë –í—Ö–æ–¥", on_click=lambda: ui.navigate.to('/login')).classes("w-40")
            ui.button("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", on_click=lambda: ui.navigate.to('/register')).classes("w-40")


@ui.page('/register')
def register_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        show_register()


@ui.page('/login')
def login_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        show_login()


@ui.page('/dashboard')
def dashboard_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        show_dashboard()


# -------------------- –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ --------------------
ui.run(port=8081)
