from nicegui import ui
import requests
import httpx

API_URL = "http://127.0.0.1:8000"
token = None

# –ø—Ä–æ—Å—Ç–∞ –≥–ª–æ–±–∞–ª–Ω–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –∑–∞ –¥–µ–º–æ
current_user = None


# -------------------- Navbar --------------------
def add_header():
    with ui.element("div").classes(
            "fixed top-0 left-0 w-full h-16 bg-amber-100 shadow-md flex items-center justify-center z-50"
    ):
        ui.icon("museum").classes("text-stone-700 text-3xl")  # –∏–∫–æ–Ω–∫–∞ (–º–æ–∂–µ—à –¥–∞ —Å–º–µ–Ω–∏—à —Å –¥—Ä—É–≥–∞)
        ui.label("___Archaeological data entry system___").classes(
            "text-2xl font-serif italic text-stone-800"
        )
        ui.icon("history_edu").classes("text-stone-700 text-3xl")
    # –æ—Å—Ç–∞–≤—è–º–µ –ø—Ä–∞–∑–Ω–æ –º—è—Å—Ç–æ –ø–æ–¥ navbar, –∑–∞ –¥–∞ –Ω–µ —Å–µ –∑–∞—Å—Ç—ä–ø–≤–∞ —Å—ä—Å —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ
    ui.space().classes("h-20")


# -------------------- API —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def register(username, email, password):
    try:
        response = requests.post(f"{API_URL}/users/", json={
            "username": username,
            "email": email,
            "password": password
        })
        if response.status_code == 200:
            ui.notify("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        else:
            ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞: {response.json().get('detail', 'Unknown error')}")
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞ —Å –±–µ–∫–µ–Ω–¥–∞: {e}")


def get_users():
    try:
        response = requests.get(f"{API_URL}/users/")
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ: {e}")
    return []


def update_user(user_id, username, email, role):
    try:
        response = requests.put(f"{API_URL}/users/{user_id}", json={
            "username": username,
            "email": email,
            "role": role
        })
        return response.status_code == 200
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ: {e}")
        return False


def delete_user(user_id):
    try:
        response = requests.delete(f"{API_URL}/users/{user_id}")
        return response.status_code == 200
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ: {e}")
        return False


# -------------------- UI —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def show_register():
    with ui.card().classes("p-8 flex flex-col items-center gap-4 shadow-xl"):
        ui.label("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è").classes("text-xl font-bold")
        username = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ")
        email = ui.input("–ò–º–µ–π–ª")
        password = ui.input("–ü–∞—Ä–æ–ª–∞", password=True)

        def validate_and_register():
            if len(username.value.strip()) < 3:
                ui.notify("‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ –∏–º–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 3 —Å–∏–º–≤–æ–ª–∞")
                return
            if "@" not in email.value or "." not in email.value:
                ui.notify("‚ö†Ô∏è –í—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª")
                return
            if len(password.value.strip()) < 6:
                ui.notify("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞")
                return
            # –∞–∫–æ –≤—Å–∏—á–∫–æ –µ –æ–∫ ‚Üí –∏–∑–≤–∏–∫–∞–π backend API
            register(username.value, email.value, password.value)

        ui.button("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–π", on_click=validate_and_register)
        ui.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=lambda: ui.navigate.to('/'))


def show_login():
    with ui.card().classes("p-8 flex flex-col items-center gap-4 shadow-xl"):
        ui.label("–í—Ö–æ–¥").classes("text-xl font-bold")
        username = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ")
        password = ui.input("–ü–∞—Ä–æ–ª–∞", password=True)

        async def login_action():
            if len(username.value.strip()) < 3:
                ui.notify("‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ—Ç–æ –∏–º–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 3 —Å–∏–º–≤–æ–ª–∞")
                return
            if len(password.value.strip()) < 4:
                ui.notify("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞")
                return
            async with httpx.AsyncClient() as client:
                try:
                    response = await client.post(
                        "http://localhost:8000/login/",
                        json={"username": username.value, "password": password.value},
                    )
                    if response.status_code == 200:
                        data = response.json()
                        # –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å–µ—Å–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                        session = ui.context.client.storage
                        session["token"] = data["access_token"]
                        session["token_type"] = data.get("token_type", "bearer")
                        session["username"] = data["username"]
                        session["id"] = data["id"]
                        session["role"] = data.get("role", "user")  # <--- –¥–æ–±–∞–≤–µ–Ω–æ

                        ui.notify(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–ª—è–∑–æ—Ö—Ç–µ –∫–∞—Ç–æ {data['username']}!")
                        ui.navigate.to("/dashboard")
                    else:
                        ui.notify("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –≤—Ö–æ–¥!", color="negative")
                except Exception as e:
                    ui.notify(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞: {e}", color="negative")

        ui.button("–í–ª–µ–∑", on_click=login_action)
        ui.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=lambda: ui.navigate.to('/'))


def show_dashboard():
    session = ui.context.client.storage
    username = session.get("username", "–≥–æ—Å—Ç")
    user_id = session.get("id")
    user_role = session.get("role", "user")

    with ui.card().classes("p-8 flex flex-col gap-4 shadow-xl w-full max-w-4xl"):
        ui.label(f"üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏").classes("text-xl font-bold")

        rows_container = ui.column().classes("gap-2")

        # --- –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–¥–æ–≤–µ—Ç–µ ---
        def refresh_rows():
            rows_container.clear()
            try:
                users = get_users()  # –∏–∑–≤–∏–∫–≤–∞ backend-–∞
                for user in users:
                    with rows_container:
                        with ui.row().classes("items-center gap-4 border-b py-2"):
                            ui.label(str(user['id'])).classes("w-8")
                            ui.label(user['username']).classes("w-48")
                            ui.label(user['email']).classes("w-64")
                            ui.label(user['role']).classes("w-32")  # <-- –Ω–æ–≤–æ –ø–æ–ª–µ
                            with ui.row().classes("gap-2"):
                                # –ë—É—Ç–æ–Ω –∑–∞ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞
                                ui.button("üîë",
                                          on_click=lambda u=user: show_change_password(u['id'], u['username'])).props(
                                    'flat dense round color=blue')
                                ui.button("‚úèÔ∏è", on_click=lambda u=user: edit_user_dialog(u)).props(
                                    'flat dense round')
                                ui.button("üóëÔ∏è", on_click=lambda u=user: confirm_delete(u)).props(
                                    'flat dense round color=red')

            except Exception as e:
                ui.notify(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏: {e}", color="negative")

        # --- —Ä–µ–¥–∞–∫—Ü–∏—è ---
        def edit_user_dialog(user):
            with ui.dialog() as dialog, ui.card():
                ui.label(f"–†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ {user['username']}").classes("text-xl")
                username_input = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ", value=user['username'])
                email_input = ui.input("–ò–º–µ–π–ª", value=user['email'])
                role_input = ui.select(["user", "admin"], value=user.get('role', 'user'), label="–†–æ–ª—è")  # <-- –Ω–æ–≤–æ

                def save():
                    if update_user(user['id'], username_input.value, email_input.value, role_input.value):
                        ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –æ–±–Ω–æ–≤–µ–Ω!")
                        refresh_rows()
                    else:
                        ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ!")
                    dialog.close()

                with ui.row().classes("gap-4 justify-between"):
                    ui.button("–ó–∞–ø–∞–∑–∏", on_click=save).classes("bg-green-500 text-white px-4 py-1 rounded")
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=dialog.close).classes("bg-gray-300 px-4 py-1 rounded")

            dialog.open()

        #--- –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ ---
        def confirm_delete(user ):
            with ui.dialog() as confirm, ui.card():
                ui.label("–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–∑–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª?").classes("text-lg")
                with ui.row().classes("justify-end gap-4"):
                    ui.button("‚ùå –û—Ç–∫–∞–∂–∏", on_click=confirm.close)
                    ui.button("üóëÔ∏è –ò–∑—Ç—Ä–∏–π", on_click=lambda: (
                        delete_user_action(user), confirm.close()
                    )).classes("bg-red-500 text-white")

            confirm.open()

        # --- –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ ---
        def delete_user_action(user):
            if delete_user(user['id']):
                ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                refresh_rows()
            else:
                ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")

        # --- —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞ ---
        def show_change_password(user_id, username):
            with ui.dialog() as dialog, ui.card():
                ui.label(f"–°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞ –∑–∞ {username}").classes("text-xl font-bold")

                old_password = ui.input("–°—Ç–∞—Äa –ø–∞—Ä–æ–ª–∞", password=True)
                new_password = ui.input("–ù–æ–≤–∞ –ø–∞—Ä–æ–ª–∞", password=True)
                confirm_password = ui.input("–ü–æ–≤—Ç–æ—Ä–∏ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞", password=True)

                def change_password_action():
                    if new_password.value != confirm_password.value:
                        ui.notify("‚ö†Ô∏è –ù–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –Ω–µ —Å—ä–≤–ø–∞–¥–∞ —Å –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ—Ç–æ")
                        return
                    if len(new_password.value.strip()) < 6:
                        ui.notify("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞")
                        return
                    try:
                        response = requests.put(
                            f"{API_URL}/users/{user_id}/change-password",
                            json={
                                "old_password": old_password.value,
                                "new_password": new_password.value
                            }
                        )
                        if response.status_code == 200:
                            ui.notify("‚úÖ –ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                            dialog.close()
                        else:
                            detail = response.json().get("detail", "–ì—Ä–µ—à–∫–∞")
                            ui.notify(f"‚ùå {detail}")
                    except Exception as e:
                        ui.notify(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞ —Å –±–µ–∫–µ–Ω–¥–∞: {e}")

                with ui.row().classes("gap-4 justify-between"):
                    ui.button("–°–º–µ–Ω–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞", on_click=change_password_action).classes(
                        "bg-green-500 text-white px-4 py-1 rounded")
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=dialog.close).classes("bg-gray-300 px-4 py-1 rounded")

            dialog.open()

        refresh_rows()


# -------------------- –°—Ç—Ä–∞–Ω–∏—Ü–∏ --------------------
@ui.page('/')
def main_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        with ui.card().classes("p-8 flex flex-col items-center gap-4 shadow-xl"):
            ui.label("–î–æ–±—Ä–µ –¥–æ—à–ª–∏!").classes("text-3xl font-bold mb-4")
            ui.button("üîë –í—Ö–æ–¥", on_click=lambda: ui.navigate.to('/login')).classes("w-40")
            ui.button("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", on_click=lambda: ui.navigate.to('/register')).classes("w-40")


@ui.page('/register')
def register_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        show_register()


@ui.page('/login')
def login_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        show_login()


@ui.page('/dashboard')
def dashboard_page():
    add_header()
    with ui.row().classes("items-center justify-center w-full"):
        show_dashboard()


# -------------------- –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ --------------------
ui.run(port=8081)
