# frontend/users/dashboard_layers.py

from nicegui import ui
import requests
from frontend.users.api import get_users, update_user, delete_user, change_password
'''
API_URL = "http://127.0.0.1:8000"


# -------------------- CRUD API —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def get_users():
    try:
        response = requests.get(f"{API_URL}/users/")
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ: {e}")
    return []


def update_user(user_id, username, email, role):
    try:
        response = requests.put(f"{API_URL}/users/{user_id}", json={
            "username": username,
            "email": email,
            "role": role
        })
        return response.status_code == 200
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ: {e}")
        return False


def delete_user(user_id):
    try:
        response = requests.delete(f"{API_URL}/users/{user_id}")
        return response.status_code == 200
    except Exception as e:
        ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ: {e}")
        return False
'''
from nicegui import ui
from frontend.users.api import get_users, update_user, delete_user, change_password


def show_dashboard():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ"""
    with ui.card().classes("p-8 flex flex-col gap-4 shadow-xl w-full max-w-5xl"):
        ui.label("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏").classes("text-xl font-bold")

        rows_container = ui.column().classes("gap-2")

        # --- —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ ---
        def refresh_rows():
            rows_container.clear()
            users = get_users()
            if not users:
                ui.label("‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏.").classes("text-red-500 italic")
                return

            for user in users:
                with rows_container:
                    with ui.row().classes("items-center gap-4 border-b py-2"):
                        ui.label(str(user["id"])).classes("w-8")
                        ui.label(user["username"]).classes("w-48")
                        ui.label(user["email"]).classes("w-64")
                        ui.label(user["role"]).classes("w-32")
                        with ui.row().classes("gap-2"):
                            ui.button("‚úèÔ∏è", on_click=lambda u=user: edit_user_dialog(u)).props("flat dense round")
                            ui.button("üóëÔ∏è", on_click=lambda u=user: confirm_delete(u)).props(
                                "flat dense round color=red")
                            ui.button("üîë", on_click=lambda u=user: show_change_password(u)).props(
                                "flat dense round color=blue")

        # --- —Ä–µ–¥–∞–∫—Ü–∏—è ---
        def edit_user_dialog(user):
            with ui.dialog() as dialog, ui.card():
                ui.label(f"–†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ {user['username']}").classes("text-lg font-bold")
                username_input = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ", value=user["username"])
                email_input = ui.input("–ò–º–µ–π–ª", value=user["email"])
                role_input = ui.select(["user", "admin"], value=user.get("role", "user"), label="–†–æ–ª—è")

                def save():
                    if update_user(user["id"], username_input.value, email_input.value, role_input.value):
                        ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –æ–±–Ω–æ–≤–µ–Ω!")
                        refresh_rows()
                    else:
                        ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ!")
                    dialog.close()

                with ui.row().classes("gap-4 justify-between"):
                    ui.button("üíæ –ó–∞–ø–∞–∑–∏", on_click=save).classes("bg-green-500 text-white")
                    ui.button("‚ùå –û—Ç–∫–∞–∂–∏", on_click=dialog.close)
            dialog.open()

        # --- –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ ---
        def confirm_delete(user):
            with ui.dialog() as confirm, ui.card():
                ui.label(f"–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ {user['username']}?").classes("text-lg")
                with ui.row().classes("justify-end gap-4"):
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=confirm.close)
                    ui.button("üóëÔ∏è –ò–∑—Ç—Ä–∏–π", on_click=lambda: (
                        delete_user_action(user),
                        confirm.close()
                    )).classes("bg-red-500 text-white")
            confirm.open()

        def delete_user_action(user):
            if delete_user(user["id"]):
                ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                refresh_rows()
            else:
                ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")

        # --- —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞ ---
        def show_change_password(user):
            username = user["username"]
            user_id = user["id"]

            with ui.dialog() as dialog, ui.card():
                ui.label(f"–°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞ –∑–∞ {username}").classes("text-xl font-bold")

                old_password = ui.input("–°—Ç–∞—Ä–∞ –ø–∞—Ä–æ–ª–∞", password=True)
                new_password = ui.input("–ù–æ–≤–∞ –ø–∞—Ä–æ–ª–∞", password=True)
                confirm_password = ui.input("–ü–æ–≤—Ç–æ—Ä–∏ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞", password=True)

                def change_password_action():
                    if not old_password.value.strip():
                        ui.notify("‚ö†Ô∏è –í—ä–≤–µ–¥–µ—Ç–µ —Å—Ç–∞—Ä–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞")
                        return

                    if new_password.value != confirm_password.value:
                        ui.notify("‚ö†Ô∏è –ù–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –Ω–µ —Å—ä–≤–ø–∞–¥–∞ —Å –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ—Ç–æ")
                        return

                    if len(new_password.value.strip()) < 6:
                        ui.notify("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞")
                        return

                    response = change_password(
                        user["id"],
                        old_password.value,
                        new_password.value
                    )

                    if response is None:
                        ui.notify("‚ùå –ù—è–º–∞ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞ –∏–ª–∏ –≤—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞")
                        return

                    # –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    if response.status_code == 200:
                        ui.notify("‚úÖ –ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                        dialog.close()
                    else:
                        try:
                            detail = response.json().get("detail", f"–ì—Ä–µ—à–∫–∞ ({response.status_code})")
                        except Exception:
                            detail = f"‚ö†Ô∏è –ù–µ–æ—á–∞–∫–≤–∞–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞: {response.text}"
                        ui.notify(f"‚ùå {detail}")

                with ui.row().classes("gap-4 justify-between"):
                    ui.button("–°–º–µ–Ω–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞", on_click=change_password_action).classes(
                        "bg-green-500 text-white px-4 py-1 rounded"
                    )
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=dialog.close).classes(
                        "bg-gray-300 px-4 py-1 rounded"
                    )

            dialog.open()

        refresh_rows()
