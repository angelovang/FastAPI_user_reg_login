from nicegui import ui
from frontend.users.api import get_users, update_user, delete_user, change_password


async def show_dashboard():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ"""
    with ui.card().classes("p-8 flex flex-col gap-4 shadow-xl w-full max-w-5xl"):
        ui.label("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏").classes("text-xl font-bold")

        rows_container = ui.column().classes("gap-2")

        # --- —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ ---
        async def refresh_rows():
            rows_container.clear()
            users = await get_users()
            if not users:
                ui.label("‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏.").classes("text-red-500 italic")
                return

            for user in users:
                with rows_container:
                    with ui.row().classes("items-center gap-4 border-b py-2"):
                        ui.label(str(user["id"])).classes("w-8")
                        ui.label(user["username"]).classes("w-48")
                        ui.label(user["email"]).classes("w-64")
                        ui.label(user["role"]).classes("w-32")
                        with ui.row().classes("gap-2"):
                            ui.button(
                                "‚úèÔ∏è",
                                on_click=lambda u=user: edit_user_dialog(u)
                            ).props("flat dense round")
                            ui.button(
                                "üóëÔ∏è",
                                on_click=lambda u=user: confirm_delete(u)
                            ).props("flat dense round color=red")
                            ui.button(
                                "üîë",
                                on_click=lambda u=user: show_change_password(u)
                            ).props("flat dense round color=blue")

        # --- —Ä–µ–¥–∞–∫—Ü–∏—è ---
        def edit_user_dialog(user):
            with ui.dialog() as dialog, ui.card():
                ui.label(f"–†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ {user['username']}").classes("text-lg font-bold")
                username_input = ui.input("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ", value=user["username"])
                email_input = ui.input("–ò–º–µ–π–ª", value=user["email"])
                role_input = ui.select(["user", "admin"], value=user.get("role", "user"), label="–†–æ–ª—è")

                async def save():
                    data = {
                        "username": username_input.value,
                        "email": email_input.value,
                        "role": role_input.value,
                    }
                    response = await update_user(user["id"], data)
                    if response:
                        ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –æ–±–Ω–æ–≤–µ–Ω!")
                        await refresh_rows()
                    else:
                        ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ!")
                    dialog.close()

                with ui.row().classes("gap-4 justify-between"):
                    ui.button("üíæ –ó–∞–ø–∞–∑–∏", on_click=save).classes("bg-green-500 text-white")
                    ui.button("‚ùå –û—Ç–∫–∞–∂–∏", on_click=dialog.close)
            dialog.open()

        # --- –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ ---
        def confirm_delete(user):
            with ui.dialog() as confirm, ui.card():
                ui.label(f"–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ {user['username']}?").classes("text-lg")

                async def confirm_action():
                    ok = await delete_user(user["id"])
                    if ok:
                        ui.notify("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                        await refresh_rows()
                    else:
                        ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")
                    confirm.close()

                with ui.row().classes("justify-end gap-4"):
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=confirm.close)
                    ui.button("üóëÔ∏è –ò–∑—Ç—Ä–∏–π", on_click=confirm_action).classes("bg-red-500 text-white")

            confirm.open()

        # --- —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞ ---
        def show_change_password(user):
            username = user["username"]

            with ui.dialog() as dialog, ui.card():
                ui.label(f"–°–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞ –∑–∞ {username}").classes("text-xl font-bold")

                old_password = ui.input("–°—Ç–∞—Ä–∞ –ø–∞—Ä–æ–ª–∞", password=True)
                new_password = ui.input("–ù–æ–≤–∞ –ø–∞—Ä–æ–ª–∞", password=True)
                confirm_password = ui.input("–ü–æ–≤—Ç–æ—Ä–∏ –Ω–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞", password=True)

                async def change_password_action():
                    if not old_password.value.strip():
                        ui.notify("‚ö†Ô∏è –í—ä–≤–µ–¥–µ—Ç–µ —Å—Ç–∞—Ä–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞")
                        return
                    if new_password.value != confirm_password.value:
                        ui.notify("‚ö†Ô∏è –ù–æ–≤–∞—Ç–∞ –ø–∞—Ä–æ–ª–∞ –Ω–µ —Å—ä–≤–ø–∞–¥–∞ —Å –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ—Ç–æ")
                        return
                    if len(new_password.value.strip()) < 6:
                        ui.notify("‚ö†Ô∏è –ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞")
                        return

                    ok = await change_password(user["id"], old_password.value, new_password.value)
                    if ok:
                        ui.notify("‚úÖ –ü–∞—Ä–æ–ª–∞—Ç–∞ –µ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                        dialog.close()
                    else:
                        ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞")

                with ui.row().classes("gap-4 justify-between"):
                    ui.button("–°–º–µ–Ω–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞", on_click=change_password_action).classes(
                        "bg-green-500 text-white px-4 py-1 rounded"
                    )
                    ui.button("–û—Ç–∫–∞–∂–∏", on_click=dialog.close).classes(
                        "bg-gray-300 px-4 py-1 rounded"
                    )

            dialog.open()

        await refresh_rows()
