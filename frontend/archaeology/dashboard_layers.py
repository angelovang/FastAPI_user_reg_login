from nicegui import ui
from frontend.archaeology.api import get_layers, create_layer, update_layer, delete_layer


def show_layers_dashboard():
    """–ì–ª–∞–≤–µ–Ω –ø–∞–Ω–µ–ª –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ tbllayers"""

    # === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ–ª–µ—Ç–∞ ===
    enum_layertype = ['–º–µ—Ö–∞–Ω–∏—á–µ–Ω', '–∫–æ–Ω—Ç–µ–∫—Å—Ç']
    enum_colors = [
        '–±—è–ª', '–∂—ä–ª—Ç', '–æ—Ö—Ä–∞', '—á–µ—Ä–≤–µ–Ω', '—Å–∏–≤',
        '—Ç—ä–º–Ω–æ—Å–∏–≤', '–∫–∞—Ñ—è–≤', '—Å–≤–µ—Ç–ª–æ–∫–∞—Ñ—è–≤', '—Ç—ä–º–Ω–æ–∫–∞—Ñ—è–≤', '—á–µ—Ä–µ–Ω'
    ]

    field_labels = {
        "layerid": "ID",
        "layername": "–ò–º–µ –Ω–∞ –ø–ª–∞—Å—Ç",
        "layertype": "–¢–∏–ø –ø–ª–∞—Å—Ç",
        "site": "–û–±–µ–∫—Ç",
        "sector": "–°–µ–∫—Ç–æ—Ä",
        "square": "–ö–≤–∞–¥—Ä–∞—Ç",
        "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç",
        "layer": "–ü–ª–∞—Å—Ç",
        "stratum": "–°—Ç—Ä–∞—Ç–∏–≥—Ä–∞—Ñ–∏—è",
        "parentid": "–†–æ–¥–∏—Ç–µ–ª ID",
        "level": "–ù–∏–≤–æ",
        "structure": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "includes": "–ü—Ä–∏–º–µ—Å–∏",
        "color1": "–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç",
        "color2": "–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç",
        "handfragments": "–†—ä—á–Ω–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏",
        "wheelfragment": "–ö–æ–ª–µ—Å–Ω–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏",
        "recordenteredby": "–í—ä–≤–µ–¥–µ–Ω –æ—Ç",
        "recordenteredon": "–í—ä–≤–µ–¥–µ–Ω –Ω–∞",
        "recordcreatedby": "–°—ä–∑–¥–∞–¥–µ–Ω –æ—Ç",
        "recordcreatedon": "–°—ä–∑–¥–∞–¥–µ–Ω –Ω–∞",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
        "akb_num": "–ê–ö–ë ‚Ññ",
    }

    table_container = ui.column().classes("w-full")

    # –¢–µ–∫—É—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    from frontend.common.session import get_session
    session = get_session()
    current_user = session.get("username", "")

    # === üü¢ –§–æ—Ä–º–∞ –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ ===
    def open_create_dialog():
        from frontend.common.session import get_session
        session = get_session()
        username = session.get("username", "")  # fallback –∞–∫–æ –Ω–µ –µ –ª–æ–≥–Ω–∞—Ç

        with ui.dialog() as dialog, ui.card().classes("w-full max-w-5xl p-6"):
            ui.label("‚ûï –ù–æ–≤ –ø–ª–∞—Å—Ç").classes("text-lg font-bold mb-2")

            with ui.grid(columns=4).classes("gap-4"):
                layername = ui.input("–ò–º–µ –Ω–∞ –ø–ª–∞—Å—Ç")
                layertype = ui.select(["–º–µ—Ö–∞–Ω–∏—á–µ–Ω", "–∫–æ–Ω—Ç–µ–∫—Å—Ç"], label="–¢–∏–ø –ø–ª–∞—Å—Ç")
                site = ui.input("–û–±–µ–∫—Ç")
                sector = ui.input("–°–µ–∫—Ç–æ—Ä")
                square = ui.input("–ö–≤–∞–¥—Ä–∞—Ç")
                context = ui.input("–ö–æ–Ω—Ç–µ–∫—Å—Ç")
                layer = ui.input("–°–ª–æ–π")
                stratum = ui.input("–°—Ç—Ä–∞—Ç–∏–≥—Ä–∞—Ñ–∏—è")
                parentid = ui.input("Parent ID").props("type=number")
                level = ui.input("–ù–∏–≤–æ")
                structure = ui.input("–°—Ç—Ä—É–∫—Ç—É—Ä–∞")
                includes = ui.input("–°—ä–¥—ä—Ä–∂–∞")
                color1 = ui.select(
                    ['–±—è–ª', '–∂—ä–ª—Ç', '–æ—Ö—Ä–∞', '—á–µ—Ä–≤–µ–Ω', '—Å–∏–≤', '—Ç—ä–º–Ω–æ—Å–∏–≤', '–∫–∞—Ñ—è–≤', '—Å–≤–µ—Ç–ª–æ–∫–∞—Ñ—è–≤', '—Ç—ä–º–Ω–æ–∫–∞—Ñ—è–≤', '—á–µ—Ä–µ–Ω'],
                    label="–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç"
                )
                color2 = ui.select(
                    ['–±—è–ª', '–∂—ä–ª—Ç', '–æ—Ö—Ä–∞', '—á–µ—Ä–≤–µ–Ω', '—Å–∏–≤', '—Ç—ä–º–Ω–æ—Å–∏–≤', '–∫–∞—Ñ—è–≤', '—Å–≤–µ—Ç–ª–æ–∫–∞—Ñ—è–≤', '—Ç—ä–º–Ω–æ–∫–∞—Ñ—è–≤', '—á–µ—Ä–µ–Ω'],
                    label="–í—Ç–æ—Ä–∏ —Ü–≤—è—Ç"
                )
                handfragments = ui.input("–†—ä—á–Ω–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏").props("type=number")
                wheelfragment = ui.input("–ì—Ä—ä–Ω—á–∞—Ä—Å–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏").props("type=number")
                recordenteredby = ui.input("–í—ä–≤–µ–¥–µ–Ω –æ—Ç", value=username)
                recordenteredon = ui.input("–í—ä–≤–µ–¥–µ–Ω –Ω–∞").props("type=date")
                recordcreatedby = ui.input("–°—ä–∑–¥–∞–¥–µ–Ω –æ—Ç", value=username)
                recordcreatedon = ui.input("–°—ä–∑–¥–∞–¥–µ–Ω –Ω–∞").props("type=date")
                description = ui.textarea("–û–ø–∏—Å–∞–Ω–∏–µ")
                akb_num = ui.input("AKB ‚Ññ").props("type=number")

            def save_layer():
                data = {
                    "layername": layername.value,
                    "layertype": layertype.value,
                    "site": site.value,
                    "sector": sector.value,
                    "square": square.value,
                    "context": context.value,
                    "layer": layer.value,
                    "stratum": stratum.value,
                    "parentid": int(parentid.value) if parentid.value else None,
                    "level": level.value,
                    "structure": structure.value,
                    "includes": includes.value,
                    "color1": color1.value,
                    "color2": color2.value,
                    "handfragments": int(handfragments.value) if handfragments.value else None,
                    "wheelfragment": int(wheelfragment.value) if wheelfragment.value else None,
                    "recordenteredby": recordenteredby.value,
                    "recordenteredon": recordenteredon.value,
                    "recordcreatedby": recordcreatedby.value,
                    "recordcreatedon": recordcreatedon.value,
                    "description": description.value,
                    "akb_num": int(akb_num.value) if akb_num.value else None,
                }
                resp = create_layer(data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –ü–ª–∞—Å—Ç—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∏—à–∏", on_click=save_layer).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)

        dialog.open()

    # === üîÅ –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ ===
    def refresh_table():
        table_container.clear()
        layers = get_layers()
        if not layers:
            ui.label("‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∏.").classes("text-gray-500 italic")
            return

        # === –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ ===
        filtered_layers = []
        for l in layers:
            if filter_name.value and filter_name.value.lower() not in (l.get('layername') or '').lower():
                continue
            if filter_type.value and l.get('layertype') != filter_type.value:
                continue
            if filter_color.value and l.get('color1') != filter_color.value:
                continue
            filtered_layers.append(l)

        all_fields = list(field_labels.keys())
        columns = [{"name": key, "label": field_labels[key], "field": key, "sortable": True} for key in all_fields]
        columns.append({"name": "actions", "label": "–î–µ–π—Å—Ç–≤–∏—è", "field": "actions"})

        rows = []
        for l in filtered_layers:
            row = {key: (l.get(key) if l.get(key) is not None else "-") for key in all_fields}
            row["actions"] = l
            rows.append(row)

        with table_container:
            table = ui.table(columns=columns, rows=rows, row_key="layerid", pagination=10)
            table.classes("w-full text-sm")
            table.add_slot("body-cell-actions", f'''
                <q-td :props="props">
                    <template v-if="props.row.actions.recordenteredby === '{current_user}'">
                        <q-btn size="sm" color="primary" flat icon="edit"
                            @click="() => $parent.$emit('edit', props.row.actions)" />
                        <q-btn size="sm" color="negative" flat icon="delete"
                            @click="() => $parent.$emit('delete', props.row.actions)" />
                    </template>
                    <template v-else>
                        <q-icon name="lock" color="grey" size="sm" />
                    </template>
                </q-td>
            ''')

            table.on("edit", lambda e: open_edit_dialog(e.args))
            table.on("delete", lambda e: confirm_delete(e.args))

        all_fields = list(field_labels.keys())
        columns = [{"name": key, "label": field_labels[key], "field": key, "sortable": True} for key in all_fields]
        columns.append({"name": "actions", "label": "–î–µ–π—Å—Ç–≤–∏—è", "field": "actions"})

    # === ‚úèÔ∏è –§–æ—Ä–º–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ü–∏—è ===
    def open_edit_dialog(layer):
        with ui.dialog() as dialog, ui.card().classes("w-full max-w-5xl p-6"):
            ui.label(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ –ø–ª–∞—Å—Ç #{layer['layerid']}").classes("text-lg font-bold mb-2")

            with ui.grid(columns=4).classes("gap-4"):
                layername = ui.input("–ò–º–µ –Ω–∞ –ø–ª–∞—Å—Ç", value=layer.get("layername", ""))
                layertype = ui.select(["–º–µ—Ö–∞–Ω–∏—á–µ–Ω", "–∫–æ–Ω—Ç–µ–∫—Å—Ç"], value=layer.get("layertype"), label="–¢–∏–ø –ø–ª–∞—Å—Ç")
                site = ui.input("–û–±–µ–∫—Ç", value=layer.get("site", ""))
                sector = ui.input("–°–µ–∫—Ç–æ—Ä", value=layer.get("sector", ""))
                square = ui.input("–ö–≤–∞–¥—Ä–∞—Ç", value=layer.get("square", ""))
                context = ui.input("–ö–æ–Ω—Ç–µ–∫—Å—Ç", value=layer.get("context", ""))
                layer_field = ui.input("–°–ª–æ–π", value=layer.get("layer", ""))
                stratum = ui.input("–°—Ç—Ä–∞—Ç–∏–≥—Ä–∞—Ñ–∏—è", value=layer.get("stratum", ""))
                parentid = ui.input("Parent ID", value=layer.get("parentid", ""))
                level = ui.input("–ù–∏–≤–æ", value=layer.get("level", ""))
                structure = ui.input("–°—Ç—Ä—É–∫—Ç—É—Ä–∞", value=layer.get("structure", ""))
                includes = ui.input("–°—ä–¥—ä—Ä–∂–∞", value=layer.get("includes", ""))
                color1 = ui.select(
                    ['–±—è–ª', '–∂—ä–ª—Ç', '–æ—Ö—Ä–∞', '—á–µ—Ä–≤–µ–Ω', '—Å–∏–≤', '—Ç—ä–º–Ω–æ—Å–∏–≤', '–∫–∞—Ñ—è–≤', '—Å–≤–µ—Ç–ª–æ–∫–∞—Ñ—è–≤', '—Ç—ä–º–Ω–æ–∫–∞—Ñ—è–≤', '—á–µ—Ä–µ–Ω'],
                    value=layer.get("color1"), label="–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç"
                )
                color2 = ui.select(
                    ['–±—è–ª', '–∂—ä–ª—Ç', '–æ—Ö—Ä–∞', '—á–µ—Ä–≤–µ–Ω', '—Å–∏–≤', '—Ç—ä–º–Ω–æ—Å–∏–≤', '–∫–∞—Ñ—è–≤', '—Å–≤–µ—Ç–ª–æ–∫–∞—Ñ—è–≤', '—Ç—ä–º–Ω–æ–∫–∞—Ñ—è–≤', '—á–µ—Ä–µ–Ω'],
                    value=layer.get("color2"), label="–í—Ç–æ—Ä–∏ —Ü–≤—è—Ç"
                )
                handfragments = ui.input("–†—ä—á–Ω–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏", value=layer.get("handfragments", ""))
                wheelfragment = ui.input("–ì—Ä—ä–Ω—á–∞—Ä—Å–∫–æ –∫–æ–ª–µ–ª–æ", value=layer.get("wheelfragment", ""))
                recordenteredby = ui.input("–í—ä–≤–µ–¥–µ–Ω –æ—Ç", value=layer.get("recordenteredby", ""))
                recordenteredon = ui.input("–í—ä–≤–µ–¥–µ–Ω –Ω–∞", value=layer.get("recordenteredon", ""))
                recordcreatedby = ui.input("–°—ä–∑–¥–∞–¥–µ–Ω –æ—Ç", value=layer.get("recordcreatedby", ""))
                recordcreatedon = ui.input("–°—ä–∑–¥–∞–¥–µ–Ω –Ω–∞", value=layer.get("recordcreatedon", ""))
                description = ui.textarea("–û–ø–∏—Å–∞–Ω–∏–µ", value=layer.get("description", ""))
                akb_num = ui.input("–ê–ö–ë ‚Ññ", value=layer.get("akb_num", ""))

            def save_changes():
                data = {
                    "layername": layername.value,
                    "layertype": layertype.value,
                    "site": site.value,
                    "sector": sector.value,
                    "square": square.value,
                    "context": context.value,
                    "layer": layer_field.value,
                    "stratum": stratum.value,
                    "parentid": int(parentid.value) if parentid.value else None,
                    "level": level.value,
                    "structure": structure.value,
                    "includes": includes.value,
                    "color1": color1.value,
                    "color2": color2.value,
                    "handfragments": int(handfragments.value) if handfragments.value else None,
                    "wheelfragment": int(wheelfragment.value) if wheelfragment.value else None,
                    "recordenteredby": recordenteredby.value,
                    "recordenteredon": recordenteredon.value,
                    "recordcreatedby": recordcreatedby.value,
                    "recordcreatedon": recordcreatedon.value,
                    "description": description.value,
                    "akb_num": int(akb_num.value) if akb_num.value else None,
                }
                resp = update_layer(layer["layerid"], data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –ü—Ä–æ–º–µ–Ω–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∞–∑–∏", on_click=save_changes).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)

        dialog.open()

    # === üóëÔ∏è –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ ===
    def confirm_delete(layer):
        with ui.dialog() as confirm, ui.card().classes("w-full max-w-xl p-4"):
            ui.label(f"‚ùó –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å–ª–æ–π'{layer.get('layername', '(–±–µ–∑ –∏–º–µ)')}'?").classes("text-lg")

            def do_delete():
                resp = delete_layer(layer["layerid"])
                if resp and getattr(resp, "status_code", None) == 200:
                    ui.notify("‚úÖ –ò–∑—Ç—Ä–∏—Ç–æ —É—Å–ø–µ—à–Ω–æ!")
                    refresh_table()
                    confirm.close()
                else:
                    try:
                        msg = resp.json().get("detail") if resp is not None else None
                    except Exception:
                        msg = None
                    ui.notify(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ! {msg or ''}")

            with ui.row().classes("justify-end gap-4 mt-4"):
                ui.button("–û—Ç–∫–∞–∂–∏", on_click=confirm.close)
                ui.button("üóëÔ∏è –ò–∑—Ç—Ä–∏–π", on_click=do_delete).classes("bg-red-500 text-white")
        confirm.open()

    # === –ó–∞–≥–ª–∞–≤–∏–µ, –±—É—Ç–æ–Ω–∏ –∏ —Ñ–∏–ª—Ç—Ä–∏ ‚Äî –≤–µ—Ä—Ç–∏–∫–∞–ª–Ω–æ –≤–ª—è–≤–æ, —Ç–∞–±–ª–∏—Ü–∞ –≤–¥—è—Å–Ω–æ ===
    with ui.row().classes("w-full items-start no-wrap"):
        # üß≠ –õ—è–≤ –ø–∞–Ω–µ–ª ‚Äî 10%
        with ui.column().classes(
                "w-[5%] min-w-[180px] gap-2 p-2 bg-gray-50 rounded-xl shadow-md sticky top-2 h-[90vh] overflow-auto"
        ):
            ui.label("‚õèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Å—Ç–æ–≤–µ").classes("text-lg font-bold mb-2")

            ui.button("‚ûï –ù–æ–≤ –ø–ª–∞—Å—Ç", on_click=open_create_dialog).classes(
                "bg-blue-500 text-white w-full"
            )

            ui.separator().classes("my-2")

            ui.label("üîç –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ:").classes("text-md font-semibold mb-2")

            filter_name = ui.input("–ò–º–µ –Ω–∞ –ø–ª–∞—Å—Ç").props("clearable").classes("w-full")
            filter_type = ui.select(
                ["", "–º–µ—Ö–∞–Ω–∏—á–µ–Ω", "–∫–æ–Ω—Ç–µ–∫—Å—Ç"], label="–¢–∏–ø –ø–ª–∞—Å—Ç"
            ).classes("w-full")
            filter_color = ui.select(
                ["", "–±—è–ª", "–∂—ä–ª—Ç", "–æ—Ö—Ä–∞", "—á–µ—Ä–≤–µ–Ω", "—Å–∏–≤", "—Ç—ä–º–Ω–æ—Å–∏–≤",
                    "–∫–∞—Ñ—è–≤", "—Å–≤–µ—Ç–ª–æ–∫–∞—Ñ—è–≤", "—Ç—ä–º–Ω–æ–∫–∞—Ñ—è–≤", "—á–µ—Ä–µ–Ω"],
                label="–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç",
            ).classes("w-full")

            ui.separator().classes("my-2")

            # ---–ë—É—Ç–æ–Ω–∏ –ø–æ–¥ —Ñ–∏–ª—Ç—Ä–∏—Ç–µ---
            ui.button("üéØ –ü—Ä–∏–ª–æ–∂–∏", on_click=lambda: refresh_table()).classes(
                "bg-green-600 text-white w-full"
            )

            with ui.row().classes("justify-between w-full"):
                def reset_filters():
                    filter_name.value = ''
                    filter_type.value = ''
                    filter_color.value = ''
                    refresh_table()

                ui.button("‚ôªÔ∏è –ù—É–ª–∏—Ä–∞–π", on_click=reset_filters).classes(
                    "bg-gray-400 text-white w-full"
                )

        # üìã –¢–∞–±–ª–∏—Ü–∞ –≤–¥—è—Å–Ω–æ ‚Äî 90%
        with ui.column().classes("w-[90%] p-1 overflow-auto"):
            table_container = ui.column().classes("w-full")

    # === –ù–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ ===
    refresh_table()
