from nicegui import ui
from datetime import date
from frontend.archaeology.api import (
    get_ornaments,
    create_ornament,
    update_ornament,
    delete_ornament,
    get_fragments,
)


def show_ornaments_dashboard():
    """–ì–ª–∞–≤–µ–Ω –ø–∞–Ω–µ–ª –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ tblornaments (—Å—ä—Å —Å—ä—â–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–æ –ø—Ä–∏ fragments/pok)."""

    # --- –ü–æ–ª–µ—Ç–∞ –∏ –ø—Ä–µ–≤–æ–¥–∏ ---
    field_labels = {
        "ornamentid": "ID",
        "fragmentid": "–§—Ä–∞–≥–º–µ–Ω—Ç ID",
        "location": "–õ–æ–∫–∞—Ü–∏—è",
        "relationship": "–í—Ä—ä–∑–∫–∞",
        "onornament": "–í—ä—Ä—Ö—É –æ—Ä–Ω–∞–º–µ–Ω—Ç",
        "encrustcolor1": "–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç",
        "encrustcolor2": "–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç",
        "primary_": "–û—Å–Ω–æ–≤–Ω–∞ —Ñ–æ—Ä–º–∞",
        "secondary": "–í—Ç–æ—Ä–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞",
        "tertiary": "–¢—Ä–µ—Ç–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞",
        "quarternary": "–ö–≤–∞—Ä—Ç.",
        "recordenteredon": "–í—ä–≤–µ–¥–µ–Ω –Ω–∞",
    }

    enum_primary = ['–ê', '–í', '–î', '–ò', '–ö', '–ù', '–ü', '–†', '–§', '–¶', '–©']
    enum_secondary = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII',
                      'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII']
    enum_tertiary = ['–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò', '–ö', '–õ', '–ú',
                     '–ü', '–ê1', '–ê2', '–ë1', '–ë2']

    table_container = ui.column().classes("w-full")

    # === CRUD —Ñ—É–Ω–∫—Ü–∏–∏ ===
    def open_create_dialog():
        fragments = get_fragments()
        fragment_options = [f"{f['fragmentid']} ‚Äì {f.get('piecetype', '')}" for f in fragments]

        with ui.dialog() as dialog, ui.card().classes("w-full max-w-4xl p-6"):
            ui.label("‚ûï –ù–æ–≤ –æ—Ä–Ω–∞–º–µ–Ω—Ç").classes("text-lg font-bold mb-4")

            with ui.grid(columns=2).classes("gap-4"):
                fragment_select = ui.select(fragment_options, label="–§—Ä–∞–≥–º–µ–Ω—Ç")
                location = ui.input("–õ–æ–∫–∞—Ü–∏—è")
                relationship = ui.input("–í—Ä—ä–∑–∫–∞")
                onornament = ui.input("–í—ä—Ä—Ö—É –æ—Ä–Ω–∞–º–µ–Ω—Ç").props("type=number")
                encrustcolor1 = ui.input("–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç")
                encrustcolor2 = ui.input("–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç")
                primary_ = ui.select(enum_primary, label="–û—Å–Ω–æ–≤–Ω–∞ —Ñ–æ—Ä–º–∞")
                secondary = ui.select(enum_secondary, label="–í—Ç–æ—Ä–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞")
                tertiary = ui.select(enum_tertiary, label="–¢—Ä–µ—Ç–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞")
                quarternary = ui.input("–ö–≤–∞—Ä—Ç.").props("type=number")
                recordenteredon = ui.input("–í—ä–≤–µ–¥–µ–Ω –Ω–∞").props("type=date")

            def save_ornament():
                frag_id = None
                if fragment_select.value:
                    frag_id = int(fragment_select.value.split("‚Äì")[0].strip())

                data = {
                    "fragmentid": frag_id,
                    "location": location.value,
                    "relationship": relationship.value,
                    "onornament": int(onornament.value) if onornament.value else None,
                    "encrustcolor1": encrustcolor1.value,
                    "encrustcolor2": encrustcolor2.value,
                    "primary_": primary_.value,
                    "secondary": secondary.value,
                    "tertiary": tertiary.value,
                    "quarternary": int(quarternary.value) if quarternary.value else None,
                    "recordenteredon": recordenteredon.value or str(date.today()),
                }

                resp = create_ornament(data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –û—Ä–Ω–∞–º–µ–Ω—Ç—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∏—à–∏", on_click=save_ornament).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)

        dialog.open()

    def open_edit_dialog(ornament):
        fragments = get_fragments()
        fragment_options = [f"{f['fragmentid']} ‚Äì {f.get('piecetype', '')}" for f in fragments]
        current_fragment = next(
            (f for f in fragment_options if f.startswith(str(ornament.get("fragmentid", "")))), None
        )

        with ui.dialog() as dialog, ui.card().classes("w-full max-w-4xl p-6"):
            ui.label(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ –æ—Ä–Ω–∞–º–µ–Ω—Ç #{ornament['ornamentid']}").classes("text-lg font-bold mb-4")

            with ui.grid(columns=2).classes("gap-4"):
                fragment_select = ui.select(fragment_options, value=current_fragment, label="–§—Ä–∞–≥–º–µ–Ω—Ç")
                location = ui.input("–õ–æ–∫–∞—Ü–∏—è", value=ornament.get("location", ""))
                relationship = ui.input("–í—Ä—ä–∑–∫–∞", value=ornament.get("relationship", ""))
                onornament = ui.input("–í—ä—Ä—Ö—É –æ—Ä–Ω–∞–º–µ–Ω—Ç", value=ornament.get("onornament", "")).props("type=number")
                encrustcolor1 = ui.input("–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç", value=ornament.get("encrustcolor1", ""))
                encrustcolor2 = ui.input("–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç", value=ornament.get("encrustcolor2", ""))
                primary_ = ui.select(enum_primary, value=ornament.get("primary_"), label="–û—Å–Ω–æ–≤–Ω–∞ —Ñ–æ—Ä–º–∞")
                secondary = ui.select(enum_secondary, value=ornament.get("secondary"), label="–í—Ç–æ—Ä–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞")
                tertiary = ui.select(enum_tertiary, value=ornament.get("tertiary"), label="–¢—Ä–µ—Ç–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞")
                quarternary = ui.input("–ö–≤–∞—Ä—Ç.", value=ornament.get("quarternary", "")).props("type=number")
                recordenteredon = ui.input("–í—ä–≤–µ–¥–µ–Ω –Ω–∞", value=ornament.get("recordenteredon", "")).props("type=date")

            def save_changes():
                frag_id = None
                if fragment_select.value:
                    frag_id = int(fragment_select.value.split("‚Äì")[0].strip())

                data = {
                    "fragmentid": frag_id,
                    "location": location.value,
                    "relationship": relationship.value,
                    "onornament": int(onornament.value) if onornament.value else None,
                    "encrustcolor1": encrustcolor1.value,
                    "encrustcolor2": encrustcolor2.value,
                    "primary_": primary_.value,
                    "secondary": secondary.value,
                    "tertiary": tertiary.value,
                    "quarternary": int(quarternary.value) if quarternary.value else None,
                    "recordenteredon": recordenteredon.value,
                }

                resp = update_ornament(ornament["ornamentid"], data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –ü—Ä–æ–º–µ–Ω–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∞–∑–∏", on_click=save_changes).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)

        dialog.open()

    def confirm_delete(ornament):
        with ui.dialog() as confirm, ui.card().classes("w-full max-w-xl p-4"):
            ui.label(f"‚ùó –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –æ—Ä–Ω–∞–º–µ–Ω—Ç ID {ornament['ornamentid']}?").classes("text-lg")

            def do_delete():
                resp = delete_ornament(ornament["ornamentid"])
                if resp and getattr(resp, "status_code", None) == 200:
                    ui.notify("‚úÖ –û—Ä–Ω–∞–º–µ–Ω—Ç—ä—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                    refresh_table()
                    confirm.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")

            with ui.row().classes("justify-end gap-4 mt-4"):
                ui.button("–û—Ç–∫–∞–∂–∏", on_click=confirm.close)
                ui.button("üóëÔ∏è –ò–∑—Ç—Ä–∏–π", on_click=do_delete).classes("bg-red-500 text-white")

        confirm.open()

    # === Layout ===
    with ui.row().classes("w-full items-start no-wrap"):
        # --- –õ—è–≤ –ø–∞–Ω–µ–ª ---
        with ui.column().classes(
            "w-[10%] min-w-[220px] gap-2 p-3 bg-gray-50 rounded-xl shadow-md sticky top-2 h-[90vh] overflow-auto"
        ):
            ui.label("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∏").classes("text-lg font-bold mb-2")

            ui.button("‚ûï –ù–æ–≤ –æ—Ä–Ω–∞–º–µ–Ω—Ç", on_click=open_create_dialog).classes("bg-blue-500 text-white w-full")

            ui.separator().classes("my-2")
            ui.label("üîç –§–∏–ª—Ç—Ä–∏").classes("text-md font-semibold mb-2")

            filter_location = ui.input("–õ–æ–∫–∞—Ü–∏—è").props("clearable").classes("w-full")
            filter_color = ui.input("–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç").props("clearable").classes("w-full")
            filter_primary = ui.input("–û—Å–Ω–æ–≤–Ω–∞ —Ñ–æ—Ä–º–∞").props("clearable").classes("w-full")

            ui.separator().classes("my-2")

            ui.button("üéØ –ü—Ä–∏–ª–æ–∂–∏", on_click=lambda: refresh_table()).classes("bg-green-600 text-white w-full")

            def reset_filters():
                filter_location.value = ""
                filter_color.value = ""
                filter_primary.value = ""
                refresh_table()

            ui.button("‚ôªÔ∏è –ù—É–ª–∏—Ä–∞–π", on_click=reset_filters).classes("bg-gray-400 text-white w-full")

        # --- –î—è—Å–Ω–∞ –∑–æ–Ω–∞ ---
        with ui.column().classes("w-[90%] p-1 overflow-auto"):
            table_container = ui.column().classes("w-full")

    # === –¢–∞–±–ª–∏—Ü–∞ —Å —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ ===
    def refresh_table():
        table_container.clear()
        ornaments = get_ornaments()
        if not ornaments:
            ui.label("‚ö†Ô∏è –ù—è–º–∞ –≤—ä–≤–µ–¥–µ–Ω–∏ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∏.").classes("text-gray-500 italic")
            return

        filtered = []
        for orn in ornaments:
            if filter_location.value and filter_location.value.lower() not in (orn.get("location", "") or "").lower():
                continue
            if filter_color.value and filter_color.value.lower() not in (orn.get("encrustcolor1", "") or "").lower():
                continue
            if filter_primary.value and filter_primary.value.lower() not in (orn.get("primary_", "") or "").lower():
                continue
            filtered.append(orn)

        columns = [{"name": k, "label": field_labels[k], "field": k, "sortable": True} for k in field_labels]
        columns.append({"name": "actions", "label": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ä–Ω–∞–º–µ–Ω—Ç–∏", "field": "actions"})

        rows = []
        for orn in filtered:
            row = {k: orn.get(k, "-") for k in field_labels}
            row["actions"] = orn
            rows.append(row)

        with table_container:
            table = ui.table(columns=columns, rows=rows, row_key="ornamentid", pagination=10)
            table.classes("w-full text-sm")
            table.add_slot("body-cell-actions", '''
                <q-td :props="props">
                    <q-btn size="sm" color="primary" flat icon="edit" @click="() => $parent.$emit('edit', props.row.actions)" />
                    <q-btn size="sm" color="negative" flat icon="delete" @click="() => $parent.$emit('delete', props.row.actions)" />
                </q-td>
            ''')
            table.on("edit", lambda e: open_edit_dialog(e.args))
            table.on("delete", lambda e: confirm_delete(e.args))

    refresh_table()
