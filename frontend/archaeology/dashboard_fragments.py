from nicegui import ui
from datetime import date
from frontend.archaeology.api import (
    get_fragments,
    create_fragment,
    update_fragment,
    delete_fragment,
)

def show_fragments_dashboard():
    """–ì–ª–∞–≤–µ–Ω –ø–∞–Ω–µ–ª –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ tblfragments (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–æ –ø—Ä–∏ dashboard_pok)."""

    # --- –ü–æ–ª–µ—Ç–∞ –∏ –ø—Ä–µ–≤–æ–¥–∏ ---
    field_labels = {
        "fragmentid": "ID",
        "locationid": "–õ–æ–∫–∞—Ü–∏—è ID",
        "fragmenttype": "–¢–∏–ø —Ñ—Ä–∞–≥–º–µ–Ω—Ç",
        "technology": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
        "baking": "–ò–∑–ø–∏—á–∞–Ω–µ",
        "fract": "–§—Ä–∞–∫—Ç—É—Ä–∞",
        "primarycolor": "–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç",
        "secondarycolor": "–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç",
        "covering": "–ü–æ–∫—Ä–∏—Ç–∏–µ",
        "includesconc": "–ö–æ–Ω—Ü. –ø—Ä–∏–º–µ—Å–∏",
        "includessize": "–†–∞–∑–º–µ—Ä –ø—Ä–∏–º–µ—Å–∏",
        "surface": "–ü–æ–≤—ä—Ä—Ö–Ω–æ—Å—Ç",
        "count": "–ë—Ä–æ–π",
        "onepot": "–ï–¥–∏–Ω —Å—ä–¥",
        "piecetype": "–¢–∏–ø —á–∞—Å—Ç",
        "wallthickness": "–î–µ–±–µ–ª–∏–Ω–∞ —Å—Ç–µ–Ω–∞",
        "handletype": "–¢–∏–ø –¥—Ä—ä–∂–∫–∞",
        "dishsize": "–†–∞–∑–º–µ—Ä —Å—ä–¥",
        "bottomtype": "–¢–∏–ø –¥—ä–Ω–æ",
        "outline": "–ö–æ–Ω—Ç—É—Ä",
        "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "form": "–§–æ—Ä–º–∞",
        "type": "–¢–∏–ø",
        "subtype": "–ü–æ–¥—Ç–∏–ø",
        "variant": "–í–∞—Ä–∏–∞–Ω—Ç",
        "note": "–ë–µ–ª–µ–∂–∫–∞",
        "inventory": "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ–Ω ‚Ññ",
        "recordenteredby": "–í—ä–≤–µ–¥–µ–Ω –æ—Ç",
        "recordenteredon": "–í—ä–≤–µ–¥–µ–Ω –Ω–∞"
    }

    # --- –ï–Ω—É–º–µ—Ä–∞—Ü–∏–∏ ---
    enum_fragmenttype = ["1", "2"]
    enum_technology = ["1", "2", "2–ê", "2–ë"]
    enum_dishsize = ["–ú", "–°", "–ì"]

    table_container = ui.column().classes("w-full")

    # –¢–µ–∫—É—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    from frontend.common.session import get_session
    session = get_session()
    current_user = session.get("username", "")

    # === CRUD —Ñ—É–Ω–∫—Ü–∏–∏ ===

    def open_create_dialog():
        with ui.dialog() as dialog, ui.card().classes("w-full max-w-5xl p-6"):
            ui.label("‚ûï –ù–æ–≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç").classes("text-lg font-bold mb-2")

            with ui.grid(columns=4).classes("gap-3"):
                locationid = ui.input("–õ–æ–∫–∞—Ü–∏—è ID").props("type=number")
                fragmenttype = ui.select(enum_fragmenttype, label="–¢–∏–ø —Ñ—Ä–∞–≥–º–µ–Ω—Ç")
                technology = ui.select(enum_technology, label="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è")
                dishsize = ui.select(enum_dishsize, label="–†–∞–∑–º–µ—Ä —Å—ä–¥")
                count = ui.input("–ë—Ä–æ–π").props("type=number")
                note = ui.input("–ë–µ–ª–µ–∂–∫–∞")
                recordenteredby = ui.input("–í—ä–≤–µ–¥–µ–Ω –æ—Ç")
                recordenteredon = ui.input("–î–∞—Ç–∞").props("type=date")

            def save_fragment():
                data = {
                    "locationid": int(locationid.value) if locationid.value else None,
                    "fragmenttype": fragmenttype.value,
                    "technology": technology.value,
                    "dishsize": dishsize.value,
                    "count": int(count.value) if count.value else 0,
                    "note": note.value,
                    "recordenteredby": recordenteredby.value,
                    "recordenteredon": recordenteredon.value or str(date.today())
                }
                resp = create_fragment(data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∏—à–∏", on_click=save_fragment).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)
        dialog.open()

    def open_edit_dialog(fragment):
        with ui.dialog() as dialog, ui.card().classes("w-full max-w-5xl p-6"):
            ui.label(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç #{fragment['fragmentid']}").classes("text-lg font-bold mb-2")

            with ui.grid(columns=4).classes("gap-3"):
                locationid = ui.input("–õ–æ–∫–∞—Ü–∏—è ID", value=fragment.get("locationid"))
                fragmenttype = ui.select(enum_fragmenttype, value=fragment.get("fragmenttype"), label="–¢–∏–ø —Ñ—Ä–∞–≥–º–µ–Ω—Ç")
                technology = ui.select(enum_technology, value=fragment.get("technology"), label="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è")
                dishsize = ui.select(enum_dishsize, value=fragment.get("dishsize"), label="–†–∞–∑–º–µ—Ä —Å—ä–¥")
                count = ui.input("–ë—Ä–æ–π", value=fragment.get("count")).props("type=number")
                note = ui.input("–ë–µ–ª–µ–∂–∫–∞", value=fragment.get("note"))
                recordenteredby = ui.input("–í—ä–≤–µ–¥–µ–Ω –æ—Ç", value=fragment.get("recordenteredby"))
                recordenteredon = ui.input("–î–∞—Ç–∞", value=fragment.get("recordenteredon")).props("type=date")

            def save_changes():
                data = {
                    "locationid": int(locationid.value) if locationid.value else None,
                    "fragmenttype": fragmenttype.value,
                    "technology": technology.value,
                    "dishsize": dishsize.value,
                    "count": int(count.value) if count.value else 0,
                    "note": note.value,
                    "recordenteredby": recordenteredby.value,
                    "recordenteredon": recordenteredon.value
                }
                resp = update_fragment(fragment["fragmentid"], data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –ü—Ä–æ–º–µ–Ω–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∞–∑–∏", on_click=save_changes).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)
        dialog.open()

    def confirm_delete(fragment):
        with ui.dialog() as confirm, ui.card().classes("w-full max-w-md p-4"):
            ui.label(f"‚ùó –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç #{fragment.get('fragmentid')}?").classes("text-lg")

            def do_delete():
                resp = delete_fragment(fragment["fragmentid"])
                if resp and getattr(resp, "status_code", None) == 200:
                    ui.notify("‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç—ä—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                    refresh_table()
                    confirm.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")

            with ui.row().classes("justify-end gap-4 mt-4"):
                ui.button("–û—Ç–∫–∞–∂–∏", on_click=confirm.close)
                ui.button("üóëÔ∏è –ò–∑—Ç—Ä–∏–π", on_click=do_delete).classes("bg-red-500 text-white")
        confirm.open()

    # === –õ—è–≤ –ø–∞–Ω–µ–ª —Å —Ñ–∏–ª—Ç—Ä–∏ + –î—è—Å–Ω–∞ —á–∞—Å—Ç —Å —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ ===
    with ui.row().classes("w-full items-start no-wrap"):
        # --- –õ—è–≤ –ø–∞–Ω–µ–ª ---
        with ui.column().classes(
            "w-[10%] min-w-[200px] gap-2 p-3 bg-gray-50 rounded-xl shadow-md sticky top-2 h-[90vh] overflow-auto"
        ):
            ui.label("üè∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏").classes("text-lg font-bold mb-2")

            ui.button("‚ûï –ù–æ–≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç", on_click=open_create_dialog).classes("bg-blue-500 text-white w-full")

            ui.separator().classes("my-2")
            ui.label("üîç –§–∏–ª—Ç—Ä–∏").classes("text-md font-semibold mb-2")

            # —Ñ–∏–ª—Ç—Ä–∏
            filter_type = ui.input("–¢–∏–ø").props("clearable").classes("w-full")
            filter_tech = ui.input("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è").props("clearable").classes("w-full")
            filter_dish = ui.input("–†–∞–∑–º–µ—Ä —Å—ä–¥").props("clearable").classes("w-full")

            ui.separator().classes("my-2")

            ui.button("üéØ –ü—Ä–∏–ª–æ–∂–∏", on_click=lambda: refresh_table()).classes("bg-green-600 text-white w-full")

            def reset_filters():
                filter_type.value = ""
                filter_tech.value = ""
                filter_dish.value = ""
                refresh_table()

            ui.button("‚ôªÔ∏è –ù—É–ª–∏—Ä–∞–π", on_click=reset_filters).classes("bg-gray-400 text-white w-full")

        # --- –î—è—Å–Ω–∞ –∑–æ–Ω–∞: —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ ---
        with ui.column().classes("w-[90%] p-1 overflow-auto"):
            table_container = ui.column().classes("w-full")

    # === –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ ===
    def refresh_table():
        table_container.clear()
        fragments = get_fragments()
        if not fragments:
            ui.label("‚ö†Ô∏è –ù—è–º–∞ –≤—ä–≤–µ–¥–µ–Ω–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏.").classes("text-gray-500 italic")
            return

        # —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ
        filtered = []
        for frag in fragments:
            if filter_type.value and filter_type.value.lower() not in (str(frag.get("type", "")) or "").lower():
                continue
            if filter_tech.value and filter_tech.value.lower() not in (str(frag.get("technology", "")) or "").lower():
                continue
            if filter_dish.value and filter_dish.value.lower() not in (str(frag.get("dishsize", "")) or "").lower():
                continue
            filtered.append(frag)

        # –∫–æ–ª–æ–Ω–∏
        all_fields = list(field_labels.keys())
        columns = [{"name": k, "label": field_labels[k], "field": k, "sortable": True} for k in all_fields]
        columns.append({"name": "actions", "label": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏", "field": "actions"})

        rows = []
        for frag in filtered:
            row = {k: (frag.get(k) if frag.get(k) is not None else "-") for k in all_fields}
            row["actions"] = frag
            rows.append(row)

        with table_container:
            table = ui.table(columns=columns, rows=rows, row_key="fragmentid", pagination=10)
            table.classes("w-full text-sm")
            table.add_slot("body-cell-actions", f'''
                 <q-td :props="props">
                     <template v-if="props.row.actions.recordenteredby === '{current_user}'">
                         <q-btn size="sm" color="primary" flat icon="edit"
                             @click="() => $parent.$emit('edit', props.row.actions)" />
                         <q-btn size="sm" color="negative" flat icon="delete"
                             @click="() => $parent.$emit('delete', props.row.actions)" />
                     </template>
                     <template v-else>
                         <q-icon name="lock" color="grey" size="sm" />
                     </template>
                 </q-td>
             ''')
            table.on("edit", lambda e: open_edit_dialog(e.args))
            table.on("delete", lambda e: confirm_delete(e.args))

    refresh_table()
