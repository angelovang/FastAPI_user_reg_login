from nicegui import ui
from datetime import date
from frontend.archaeology.api import (
    get_fragments,
    create_fragment,
    update_fragment,
    delete_fragment
)

def show_fragments_dashboard():
    """–ì–ª–∞–≤–µ–Ω –ø–∞–Ω–µ–ª –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ tblfragments"""

    # --- –ü–æ–ª–µ—Ç–∞ –∏ –ø—Ä–µ–≤–æ–¥–∏ ---
    field_labels = {
        "fragmentid": "ID",
        "locationid": "–õ–æ–∫–∞—Ü–∏—è ID",
        "fragmenttype": "–¢–∏–ø —Ñ—Ä–∞–≥–º–µ–Ω—Ç",
        "technology": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
        "baking": "–ò–∑–ø–∏—á–∞–Ω–µ",
        "fract": "–§—Ä–∞–∫—Ç—É—Ä–∞",
        "primarycolor": "–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç",
        "secondarycolor": "–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç",
        "covering": "–ü–æ–∫—Ä–∏—Ç–∏–µ",
        "includesconc": "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Å–∏",
        "includessize": "–†–∞–∑–º–µ—Ä –ø—Ä–∏–º–µ—Å–∏",
        "surface": "–ü–æ–≤—ä—Ä—Ö–Ω–æ—Å—Ç",
        "count": "–ë—Ä–æ–π",
        "onepot": "–ï–¥–∏–Ω —Å—ä–¥",
        "piecetype": "–¢–∏–ø —á–∞—Å—Ç",
        "wallthickness": "–î–µ–±–µ–ª–∏–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–∞",
        "handletype": "–¢–∏–ø –¥—Ä—ä–∂–∫–∞",
        "dishsize": "–†–∞–∑–º–µ—Ä —Å—ä–¥",
        "bottomtype": "–¢–∏–ø –¥—ä–Ω–æ",
        "outline": "–ö–æ–Ω—Ç—É—Ä",
        "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        "form": "–§–æ—Ä–º–∞",
        "type": "–¢–∏–ø",
        "subtype": "–ü–æ–¥—Ç–∏–ø",
        "variant": "–í–∞—Ä–∏–∞–Ω—Ç",
        "note": "–ë–µ–ª–µ–∂–∫–∞",
        "inventory": "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ–Ω ‚Ññ",
        "recordenteredby": "–í—ä–≤–µ–¥–µ–Ω –æ—Ç",
        "recordenteredon": "–í—ä–≤–µ–¥–µ–Ω –Ω–∞"
    }

    # --- –ï–Ω—É–º–µ—Ä–∞—Ü–∏–∏ ---
    enum_fragmenttype = ["1", "2"]
    enum_technology = ["1", "2", "2–ê", "2–ë"]
    enum_baking = ["–†", "–ù"]
    enum_fract = ["1", "2", "3"]
    enum_color = ["–±—è–ª", "–∂—ä–ª—Ç", "–æ—Ö—Ä–∞", "—á–µ—Ä–≤–µ–Ω", "—Å–∏–≤", "—Ç—ä–º–Ω–æ—Å–∏–≤", "–∫–∞—Ñ—è–≤", "—Å–≤–µ—Ç–ª–æ–∫–∞—Ñ—è–≤", "—Ç—ä–º–Ω–æ–∫–∞—Ñ—è–≤", "—á–µ—Ä–µ–Ω"]
    enum_covering = ["–¥–∞", "–Ω–µ", "–§1", "–§2", "–ë", "–ì"]
    enum_includesconc = ["+", "-"]
    enum_includessize = ["–ú", "–°", "–ì"]
    enum_surface = ["–ê", "–ë", "–í", "–í1", "–í2", "–ì"]
    enum_onepot = ["–¥–∞", "–Ω–µ"]
    enum_piecetype = ["—É—Å—Ç–∏–µ", "—Å—Ç–µ–Ω–∞", "–¥—Ä—ä–∂–∫–∞", "–¥—ä–Ω–æ", "–ø—Ä–æ—Ñ–∏–ª", "—á—É—á—É—Ä", "–¥—ä–Ω–æ+–¥—Ä—ä–∂–∫–∞", "–ø—Ä–æ—Ñ–∏–ª+–¥—Ä—ä–∂–∫–∞",
                      "—É—Å—Ç–∏–µ+–¥—Ä—ä–∂–∫–∞", "—Å—Ç–µ–Ω–∞+–¥—Ä—ä–∂–∫–∞", "–ø—Å–µ–≤–¥–æ—á—É—á—É—Ä", "–ø–ª–∞–≤–µ–Ω –ø—Ä–µ–ª–æ–º", "–±–∏–∫–æ–Ω–∏—á–Ω–æ—Å—Ç", "–¥–≤–æ–µ–Ω —Å—ä–¥", "—Ü—è–ª —Å—ä–¥"]
    enum_wallthickness = ["–ú", "–°", "–ì"]
    enum_dishsize = ["–ú", "–°", "–ì"]
    enum_bottomtype = ["–ê", "–ë", "–í", "–ê1", "–ê2", "–ë1", "–ë2", "–í1", "–í2"]
    enum_outline = ["1", "2", "3"]

    table_container = ui.column().classes("w-full")

    # === üü¢ –°—ä–∑–¥–∞–≤–∞–Ω–µ ===
    def open_create_dialog():
        with ui.dialog() as dialog, ui.card().classes("w-full max-w-5xl p-6"):
            ui.label("‚ûï –ù–æ–≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç").classes("text-lg font-bold mb-2")

            with ui.grid(columns=4).classes("gap-3"):
                locationid = ui.input("–õ–æ–∫–∞—Ü–∏—è ID").props("type=number")
                fragmenttype = ui.select(enum_fragmenttype, label="–¢–∏–ø —Ñ—Ä–∞–≥–º–µ–Ω—Ç")
                technology = ui.select(enum_technology, label="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è")
                baking = ui.select(enum_baking, label="–ò–∑–ø–∏—á–∞–Ω–µ")
                fract = ui.select(enum_fract, label="–§—Ä–∞–∫—Ç—É—Ä–∞")
                primarycolor = ui.select(enum_color, label="–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç")
                secondarycolor = ui.select(enum_color, label="–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç")
                covering = ui.select(enum_covering, label="–ü–æ–∫—Ä–∏—Ç–∏–µ")
                includesconc = ui.select(enum_includesconc, label="–ö–æ–Ω—Ü. –ø—Ä–∏–º–µ—Å–∏")
                includessize = ui.select(enum_includessize, label="–†–∞–∑–º–µ—Ä –ø—Ä–∏–º–µ—Å–∏")
                surface = ui.select(enum_surface, label="–ü–æ–≤—ä—Ä—Ö–Ω–æ—Å—Ç")
                count = ui.input("–ë—Ä–æ–π").props("type=number")
                onepot = ui.select(enum_onepot, label="–ï–¥–∏–Ω —Å—ä–¥")
                piecetype = ui.select(enum_piecetype, label="–¢–∏–ø —á–∞—Å—Ç")
                wallthickness = ui.select(enum_wallthickness, label="–î–µ–±–µ–ª–∏–Ω–∞ —Å—Ç–µ–Ω–∞")
                handletype = ui.input("–¢–∏–ø –¥—Ä—ä–∂–∫–∞")
                dishsize = ui.select(enum_dishsize, label="–†–∞–∑–º–µ—Ä —Å—ä–¥")
                bottomtype = ui.select(enum_bottomtype, label="–¢–∏–ø –¥—ä–Ω–æ")
                outline = ui.select(enum_outline, label="–ö–æ–Ω—Ç—É—Ä")
                category = ui.input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
                form = ui.input("–§–æ—Ä–º–∞")
                type_ = ui.input("–¢–∏–ø")
                subtype = ui.input("–ü–æ–¥—Ç–∏–ø")
                variant = ui.input("–í–∞—Ä–∏–∞–Ω—Ç")
                note = ui.input("–ë–µ–ª–µ–∂–∫–∞")
                inventory = ui.input("–ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ–Ω ‚Ññ")
                recordenteredby = ui.input("–í—ä–≤–µ–¥–µ–Ω –æ—Ç")
                recordenteredon = ui.input("–î–∞—Ç–∞").props("type=date")

            def save_fragment():
                data = {
                    "locationid": int(locationid.value) if locationid.value else None,
                    "fragmenttype": fragmenttype.value,
                    "technology": technology.value,
                    "baking": baking.value,
                    "fract": fract.value,
                    "primarycolor": primarycolor.value,
                    "secondarycolor": secondarycolor.value,
                    "covering": covering.value,
                    "includesconc": includesconc.value,
                    "includessize": includessize.value,
                    "surface": surface.value,
                    "count": int(count.value) if count.value else 0,
                    "onepot": onepot.value,
                    "piecetype": piecetype.value,
                    "wallthickness": wallthickness.value,
                    "handletype": handletype.value,
                    "dishsize": dishsize.value,
                    "bottomtype": bottomtype.value,
                    "outline": outline.value,
                    "category": category.value,
                    "form": form.value,
                    "type": int(type_.value) if type_.value else None,
                    "subtype": subtype.value,
                    "variant": int(variant.value) if variant.value else None,
                    "note": note.value,
                    "inventory": inventory.value,
                    "recordenteredby": recordenteredby.value,
                    "recordenteredon": recordenteredon.value or str(date.today())
                }
                resp = create_fragment(data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∏—à–∏", on_click=save_fragment).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)

        dialog.open()

    # === ‚úèÔ∏è –†–µ–¥–∞–∫—Ü–∏—è ===
    def open_edit_dialog(fragment):
        with ui.dialog() as dialog, ui.card().classes("w-full max-w-5xl p-6"):
            ui.label(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç #{fragment['fragmentid']}").classes("text-lg font-bold mb-2")

            with ui.grid(columns=4).classes("gap-3"):
                locationid = ui.input("–õ–æ–∫–∞—Ü–∏—è ID", value=fragment.get("locationid"))
                fragmenttype = ui.select(enum_fragmenttype, value=fragment.get("fragmenttype"), label="–¢–∏–ø —Ñ—Ä–∞–≥–º–µ–Ω—Ç")
                technology = ui.select(enum_technology, value=fragment.get("technology"), label="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è")
                baking = ui.select(enum_baking, value=fragment.get("baking"), label="–ò–∑–ø–∏—á–∞–Ω–µ")
                fract = ui.select(enum_fract, value=fragment.get("fract"), label="–§—Ä–∞–∫—Ç—É—Ä–∞")
                primarycolor = ui.select(enum_color, value=fragment.get("primarycolor"), label="–û—Å–Ω–æ–≤–µ–Ω —Ü–≤—è—Ç")
                secondarycolor = ui.select(enum_color, value=fragment.get("secondarycolor"), label="–í—Ç–æ—Ä–∏—á–µ–Ω —Ü–≤—è—Ç")
                covering = ui.select(enum_covering, value=fragment.get("covering"), label="–ü–æ–∫—Ä–∏—Ç–∏–µ")
                includesconc = ui.select(enum_includesconc, value=fragment.get("includesconc"), label="–ö–æ–Ω—Ü. –ø—Ä–∏–º–µ—Å–∏")
                includessize = ui.select(enum_includessize, value=fragment.get("includessize"), label="–†–∞–∑–º–µ—Ä –ø—Ä–∏–º–µ—Å–∏")
                surface = ui.select(enum_surface, value=fragment.get("surface"), label="–ü–æ–≤—ä—Ä—Ö–Ω–æ—Å—Ç")
                count = ui.input("–ë—Ä–æ–π", value=fragment.get("count")).props("type=number")
                onepot = ui.select(enum_onepot, value=fragment.get("onepot"), label="–ï–¥–∏–Ω —Å—ä–¥")
                piecetype = ui.select(enum_piecetype, value=fragment.get("piecetype"), label="–¢–∏–ø —á–∞—Å—Ç")
                wallthickness = ui.select(enum_wallthickness, value=fragment.get("wallthickness"), label="–î–µ–±–µ–ª–∏–Ω–∞ —Å—Ç–µ–Ω–∞")
                handletype = ui.input("–¢–∏–ø –¥—Ä—ä–∂–∫–∞", value=fragment.get("handletype"))
                dishsize = ui.select(enum_dishsize, value=fragment.get("dishsize"), label="–†–∞–∑–º–µ—Ä —Å—ä–¥")
                bottomtype = ui.select(enum_bottomtype, value=fragment.get("bottomtype"), label="–¢–∏–ø –¥—ä–Ω–æ")
                outline = ui.select(enum_outline, value=fragment.get("outline"), label="–ö–æ–Ω—Ç—É—Ä")
                category = ui.input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value=fragment.get("category"))
                form = ui.input("–§–æ—Ä–º–∞", value=fragment.get("form"))
                type_ = ui.input("–¢–∏–ø", value=fragment.get("type"))
                subtype = ui.input("–ü–æ–¥—Ç–∏–ø", value=fragment.get("subtype"))
                variant = ui.input("–í–∞—Ä–∏–∞–Ω—Ç", value=fragment.get("variant"))
                note = ui.input("–ë–µ–ª–µ–∂–∫–∞", value=fragment.get("note"))
                inventory = ui.input("–ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ–Ω ‚Ññ", value=fragment.get("inventory"))
                recordenteredby = ui.input("–í—ä–≤–µ–¥–µ–Ω –æ—Ç", value=fragment.get("recordenteredby"))
                recordenteredon = ui.input("–î–∞—Ç–∞", value=fragment.get("recordenteredon")).props("type=date")

            def save_changes():
                data = {
                    "locationid": int(locationid.value) if locationid.value else None,
                    "fragmenttype": fragmenttype.value,
                    "technology": technology.value,
                    "baking": baking.value,
                    "fract": fract.value,
                    "primarycolor": primarycolor.value,
                    "secondarycolor": secondarycolor.value,
                    "covering": covering.value,
                    "includesconc": includesconc.value,
                    "includessize": includessize.value,
                    "surface": surface.value,
                    "count": int(count.value) if count.value else 0,
                    "onepot": onepot.value,
                    "piecetype": piecetype.value,
                    "wallthickness": wallthickness.value,
                    "handletype": handletype.value,
                    "dishsize": dishsize.value,
                    "bottomtype": bottomtype.value,
                    "outline": outline.value,
                    "category": category.value,
                    "form": form.value,
                    "type": int(type_.value) if type_.value else None,
                    "subtype": subtype.value,
                    "variant": int(variant.value) if variant.value else None,
                    "note": note.value,
                    "inventory": inventory.value,
                    "recordenteredby": recordenteredby.value,
                    "recordenteredon": recordenteredon.value,
                }
                resp = update_fragment(fragment["fragmentid"], data)
                if resp and resp.status_code == 200:
                    ui.notify("‚úÖ –ü—Ä–æ–º–µ–Ω–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏!")
                    refresh_table()
                    dialog.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å!")

            with ui.row().classes("justify-end mt-4 gap-4"):
                ui.button("üíæ –ó–∞–ø–∞–∑–∏", on_click=save_changes).classes("bg-green-500 text-white")
                ui.button("‚ùå –û—Ç–∫–∞–∑", on_click=dialog.close)

        dialog.open()

    # === üóëÔ∏è –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ ===
    def confirm_delete(fragment):
        with ui.dialog() as confirm, ui.card().classes("w-full max-w-xl p-4"):
            ui.label(f"‚ùó –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç #{fragment.get('fragmentid')}?").classes("text-lg")

            def do_delete():
                resp = delete_fragment(fragment["fragmentid"])
                if resp and getattr(resp, "status_code", None) == 200:
                    ui.notify("‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç—ä—Ç –µ –∏–∑—Ç—Ä–∏—Ç!")
                    refresh_table()
                    confirm.close()
                else:
                    ui.notify("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ!")

            with ui.row().classes("justify-end gap-4 mt-4"):
                ui.button("–û—Ç–∫–∞–∂–∏", on_click=confirm.close)
                ui.button("üóëÔ∏è –ò–∑—Ç—Ä–∏–π", on_click=do_delete).classes("bg-red-500 text-white")

        confirm.open()

    # === –¢–∞–±–ª–∏—Ü–∞ ===
    def refresh_table():
        table_container.clear()
        fragments = get_fragments()
        if not fragments:
            ui.label("‚ö†Ô∏è –ù—è–º–∞ –≤—ä–≤–µ–¥–µ–Ω–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏.").classes("text-gray-500 italic")
            return

        all_fields = list(field_labels.keys())
        columns = [{"name": k, "label": field_labels[k], "field": k, "sortable": True} for k in all_fields]
        columns.append({"name": "actions", "label": "–î–µ–π—Å—Ç–≤–∏—è", "field": "actions"})

        rows = []
        for frag in fragments:
            row = {k: (frag.get(k) if frag.get(k) is not None else "-") for k in all_fields}
            row["actions"] = frag
            rows.append(row)

        with table_container:
            table = ui.table(columns=columns, rows=rows, row_key="fragmentid", pagination=10)
            table.classes("w-full text-sm")
            table.add_slot("body-cell-actions", '''
                <q-td :props="props">
                    <q-btn size="sm" color="primary" flat icon="edit" @click="() => $parent.$emit('edit', props.row.actions)" />
                    <q-btn size="sm" color="negative" flat icon="delete" @click="() => $parent.$emit('delete', props.row.actions)" />
                </q-td>
            ''')
            table.on("edit", lambda e: open_edit_dialog(e.args))
            table.on("delete", lambda e: confirm_delete(e.args))

    # === –ó–∞–≥–ª–∞–≤–∏–µ ===
    with ui.row().classes("justify-between w-full py-4"):
        ui.label("üè∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏").classes("text-xl font-bold")
        ui.button("‚ûï –ù–æ–≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç", on_click=open_create_dialog).classes("bg-blue-500 text-white")

    refresh_table()
